# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PurchaseItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, price=None, amount=None):  # noqa: E501
        """PurchaseItem - a model defined in OpenAPI

        :param name: The name of this PurchaseItem.  # noqa: E501
        :type name: str
        :param price: The price of this PurchaseItem.  # noqa: E501
        :type price: int
        :param amount: The amount of this PurchaseItem.  # noqa: E501
        :type amount: int
        """
        self.openapi_types = {
            'name': str,
            'price': int,
            'amount': int
        }

        self.attribute_map = {
            'name': 'name',
            'price': 'price',
            'amount': 'amount'
        }

        self._name = name
        self._price = price
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt) -> 'PurchaseItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PurchaseItem of this PurchaseItem.  # noqa: E501
        :rtype: PurchaseItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PurchaseItem.


        :return: The name of this PurchaseItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PurchaseItem.


        :param name: The name of this PurchaseItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this PurchaseItem.


        :return: The price of this PurchaseItem.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PurchaseItem.


        :param price: The price of this PurchaseItem.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501
        if price is not None and price < 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._price = price

    @property
    def amount(self):
        """Gets the amount of this PurchaseItem.


        :return: The amount of this PurchaseItem.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PurchaseItem.


        :param amount: The amount of this PurchaseItem.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount
